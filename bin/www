#!/usr/bin/env node
// Transpile all code following this line with babel and use 'env' (aka ES6) preset.
require('babel-register')({
    presets: [ 'env' ]
});

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lenote:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Create Socket.IO server and connect sockets
 */
var io = require('socket.io')(server);
var editFileSocket = require('../sockets/colaboration')(io);


/**
 * Create Share DB server
 */
const keys = require("../config/keys");
const db = require('sharedb-mongo')(keys.mongodb.dbURI);
const ShareDB = require('sharedb')
ShareDB.types.register(require('ot-text').type)
const WebSocket = require('ws')
const WebSocketJSONStream = require('websocket-json-stream')

const share = new ShareDB({db})

const shareconn = share.connect()
const shareserver = http.createServer()
const sharewss = new WebSocket.Server({ server: shareserver })
sharewss.on('connection', client => share.listen(new WebSocketJSONStream(client)))
shareserver.listen(8080);
console.log(`ShareDB listening on port 8080`);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
